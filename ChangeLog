2005-02-09  David Reveman  <davidr@novell.com>

	* Add preliminary support for EXT_framebuffer_object.

2005-02-01  David Reveman  <davidr@novell.com>

	* src/glitz_surface.c (glitz_surface_set_transform): Fix typo in
	comment and remove unnecessary code.

2005-01-25  David Reveman  <davidr@novell.com>

	* src/glitz.h (GLITZ_REVISION): Bump version to 0.4.0.

	* configure.in: Bump version to 0.4.0.

	Add anti-aliased trapezoids, rectangular clipping, multiple
	geometry arrays, bitmap geometry, mask surface convolution filtering.

2004-12-07  David Reveman  <c99drn@cs.umu.se>

	* src/glitzint.h: Moved misplaced __internal_linkage.

2004-12-03  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_compose.c (glitz_composite_op_init): Make sure some
	context is current when synchronizing solid color.

	* src/glitz_pixel.c: Added quick paths for solid surfaces.

2004-11-12  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_rect.c (glitz_set_rectangles): Clear solid damage
	flag when setting solid color (Luca Barbieri).

2004-11-08  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_buffer.c: Important bug fix. Bind default buffer
	object after map and bind named buffer object before unmap.
	Thanks to Luca Barbieri. 

2004-11-03  David Reveman  <c99drn@cs.umu.se>

	* Source tree restructuring and switch to new drawable interface.

2004-10-21  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_pixel.c (glitz_get_pixels): Set read buffer and
	scissor box before ReadPixels.

	* src/glitz.c (glitz_copy_area): Reset scissor box when before
	CopyPixels.
	(glitz_copy_area): Moved pop_current to correct place.
	(glitz_copy_area): Set read buffer and scissor box before
	copy_texture.

2004-10-09  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_pixel.c (glitz_get_pixels): Set intermediate image
	size correctly.

2004-10-06  David Reveman  <c99drn@cs.umu.se>

	* src/glitz.c (glitz_copy_area): Fixed source drawable offset.

	* src/glitz_pixel.c (glitz_set_pixels): Fixed drawable offset.

2004-10-04  David Reveman  <c99drn@cs.umu.se>

	* src/glitz.h (GLITZ_REVISION): Bump version to 0.2.3.

	* configure.in: Bump version to 0.2.3.

	* src/glitz_texture.c: Added glitz_texture_size_check.

	* src/glitz_rect.c (glitz_set_rectangles): Made the software fall-back
	for fill rectangles a bit more efficient.

	* src/glitz.c (glitz_composite): Tracking changes to geometry objects.

	* src/glitz_pixel.c: Tracking changes to geometry objects.
	Fixed a few offset problems.

	* src/glitz_glxint.h: Added GLX features.

	* src/glitz_glx_surface.c: Added surface size checks.

	* src/glitz_glx_pbuffer.c: screen_info to glitz_glx_pbuffer_create
	and glitz_glx_pbuffer_destroy.

	* src/glitz_glx_info.c: glBlendColor needs function address lookup.
	(glitz_glx_get_proc_address): Only lookup glXGetProcAddress if
	GLITZ_GLX_FEATURE_GLX_GET_PROC_ADDRESS_MASK is present.
	(_glitz_glx_proc_address_lookup): Fixed GLX function address lookup.
	Fixed root context creation.
	(glitz_glx_screen_info_get): Check GLX extension version.
	Added underscore prefix to static function names.

	* src/glitz_glx_format.c: glitz_glx_query_formats_glx12 ->
	glitz_glx_query_formats.
	glitz_glx_query_formats_glx13 -> glitz_glx_query_formats_fbconfig.

	* src/glitz_glx_extension.c: Check GLX extensions.
	Check for GL_EXT_blend_color.
	client_glx -> glx.
	gl_extensions_strings -> gl_extensions_string.

	* src/glitz_glx_context.c: glitz_glx_context_create_glx12 ->
	glitz_glx_context_create.
	glitz_glx_context_create_glx13 -> glitz_glx_context_create_fbconfig.
	GLX function pointers are now stored in screen_info.
	(glitz_glx_context_proc_address_lookup): 
	Function address lookup updates.

	* src/glitz_gl.h: Added viewport and texture size tokens.

	* src/glitz_geometry.c: Update default geometry to current clipping 
	box.

	* src/glitz_compose.c: Check for GLITZ_FEATURE_BLEND_COLOR_MASK
	support.

	* src/glitz_buffer.c: Added support for glitz_buffer_create_for_data
	functionality.

	* src/glitz_aglint.h: Added GLITZ_AGL_FEATURE_BLEND_COLOR_MASK.
	Max texture sizes and viewport sizes in glitz_agl_context_t.

	* src/glitz_agl_surface.c: Added surface size checks.

	* src/glitz_agl_info.c: glBlendColor needs function address lookup.
	(glitz_agl_thread_info_init): Fixed root context init.

	* src/glitz_agl_extension.c: Check for GL_EXT_blend_color.
	(_glitz_agl_extension_query_gl): gl_extensions_strings ->
	gl_extensions_string.
	(glitz_agl_query_extensions): Check GL_EXT_blend_color. 

	* src/glitz_agl_context.c (glitz_agl_context_proc_address_lookup): 
	Function address lookup updates.

	* src/glitz.h: Added GLITZ_FEATURE_BLEND_COLOR_MASK.
	Added glitz_buffer_create_for_data.

2004-09-21  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_glxint.h: Added create_new_context to 
	glitz_glx_static_proc_address_list_t.
	A GLXContext as parameter to glitz_glx_context_make_current.

	* src/glitz_glxext.h: Added glitz_glx_create_new_context_t function
	prototype.

	* src/glitz_glx_surface.c (_glitz_glx_surface_destroy): A
	GLXContext to glitz_glx_context_make_current.

	* src/glitz_glx_pbuffer.c (glitz_glx_pbuffer_create): Only create
	pbuffer if we've got a valid fbconfig.

	* src/glitz_glx_info.c (glitz_glx_proc_address_lookup): Added
	glXCreateNewContext.

	* src/glitz_glx_context.c (_glitz_glx_context_create_glx12): Use
	GLITZ_GL_TRUE instead of 1 for GL_TRUE.
	(_glitz_glx_context_create_glx13): If now visual could be found
	for a format the context should be created with glXCreateNewContext. 
	(glitz_glx_context_make_current): The default GLXContext is now a
	parameter.
	(glitz_glx_context_update): Use root context as new context if no
	real context is available.

2004-09-20  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_filter.c (glitz_filter_set_params): Fixed number of color
	stops calculation.

	* src/glitz_texture.c (glitz_texture_init): Initialize texture
	flags depending on border clamp support.

	* src/glitz_program.c: Added better testing whether fragment program
	failed to load or not.

	* src/glitz_glx_info.c (glitz_glx_create_root_context): Don't set
	program map here.
	(glitz_glx_screen_info_get): Set program_map here.

	* src/glitz_glx_context.c (glitz_glx_context_get): Init feature mask
	to screen_info feature mask.
	(glitz_glx_context_proc_address_lookup): No need to init feature mask
	here.

	* src/glitz_gl.h: Added a bunch of fragment program tokens.

	* src/glitz_aglint.h: Added gl_version to thread_info.
	Added function address lookup utility functions.

	* src/glitz_agl_surface.c: Push context current if function address
	lookup is needed.

	* src/glitz_agl_info.c: Added function address lookup.

	* src/glitz_agl_extension.c: Enable VBO and PBO extension
	checking.
	(glitz_agl_query_extensions): Store GL_VERSION in thread_info.

	* src/glitz_agl_context.c: Added function address lookup for all
	functions not part of OpenGL 1.2.

	* TODO: Improved AGL backend.

2004-09-17  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_pixel.c: GLITZ_TRANSFORM_COPY_BOX_MASK is more correct name
	than GLITZ_TRANSFORM_COPY_REGION_MASK.
	(glitz_set_pixels): Set GLITZ_GL_UNPACK_ROW_LENGTH.
	(glitz_get_pixels): Set GLITZ_GL_PACK_ROW_LENGTH.
	GLITZ_GL_UNPACK_ALIGNMENT should be GLITZ_GL_PACK_ALIGNMENT.

	* src/glitz_buffer.c (_glitz_buffer_init): Unbind buffer after
	creation.
	(glitz_pixel_buffer_create): Use buffer hint for choosing target.

2004-09-16  David Reveman  <c99drn@cs.umu.se>

	* src/glitz.c (glitz_composite): Don't set texture wrap mode to
	GL_CLAMP_TO_BORDER when extension is missing.

2004-09-15  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_agl_extension.c:
	* src/glitz_glx_extension.c: Don't accept any extension by using
	GL_VERSION as if it's not listed in the extension string it's usually
	not supported in hardware.

	* src/glitz_pixel.c (glitz_set_pixels): Get texture before pixel
	transform and buffer bind.

2004-09-14  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_compose.c: Fixed division by zero bug that occurred when
	solid color alpha was zero.

2004-09-13  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_glx_info.c:
	* src/glitz_agl_info.c: Addedd glBlendColor.

	* src/glitzint.h: Added glBlendColor glitz_gl_proc_address_list_t.
	Added render_op to glitz_composite_op_t.
	component_alpha -> per_component.
	Render operator to glitz_composite_op_init.

	* src/glitz_compose.c: Added support for component alpha in one single
	pass when using a solid color as source.
	Render operator is now set from here.

	* src/glitz_gl.h: Added GLITZ_GL_ONE_MINUS_SRC_COLOR and
	GLITZ_GL_CONSTANT_COLOR tokens.
	Added glitz_gl_blend_color_t prototype.

	* src/glitz_glx_context.c: 
	* src/glitz_glx_extension.c:
	* src/glitz_agl_extension.c:	
	* src/glitz.h: GLITZ_FEATURE_COMPONENT_ALPHA_MASK ->
	GLITZ_FEATURE_PER_COMPONENT_RENDERING_MASK.

	* src/glitz.c (glitz_composite): Render operator is now set by
	in composite_enable.
	(glitz_composite): component_alpha -> per_component, as we can now
	do component alpha without multiple passes in some cases.
	(glitz_composite): Multiply all alpha_mask components by weight, so
	that we get solidc surfaces right.

2004-09-11  David Reveman  <c99drn@cs.umu.se>

	* src/glitz.h (GLITZ_REVISION): Bump version to 0.2.2.

	* configure.in: Bump version to 0.2.2.

	* src/glitz_filter.c (glitz_filter_set_params): Gradient coordinates
	are now translated 0.5 in both x and y directions within glitz so
	applications shouldn't have to think about this anymore. e.g.
	specifying the top-left pixel as color stop coordinate is now done
	with x parameter 0.0 and y parameter 0.0. This makes much more sence.

	* src/glitz_rect.c (glitz_set_rectangles): Fixed memory leak.
	Fixed order of pixel color components.

	* src/glitz.c (glitz_composite): Oh, I'm good at these, not the
	first time I accidentally replaced x with y. 

2004-09-10  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_rect.c: Added missing hidden_def to glitz_set_rectangles.
	(glitz_rectangle_bounds): hmm, how did this function turn up like
	this, well now it's fixed

	* src/glitzint.h: Added PROJECTIVE_TRANSFORM flag.

	* src/glitz_surface.c (glitz_surface_set_transform): Check if
	projective transform.

	* src/glitz_program.c: Fixed so that perspective transformations
	work with convolution filters and gradient filters.

	* src/glitz_compose.c (SURFACE_WRAP): Only allow projective
	transformations if GL_ARB_texture_clamp_to_border is present.

2004-09-09  David Reveman  <c99drn@cs.umu.se>

	* src/glitzint.h: IGNORE_REPEAT flag replaced by IGNORE_WRAP flag.
	TEXTURE_COORDS flag replaced by EYE_COORDS flag.

	* src/glitz_texture.c (glitz_texture_set_tex_gen): Only shift
	coordinates for texture border when it's not done by the
	transformation matrix.

	* src/glitz_surface.c (glitz_surface_init): No surface flags
	set by default.
	(glitz_surface_set_transform): Added transformation
	support for hardware without GL_ARB_texture_clamp_to_border.
	(glitz_surface_set_transform): Set new SURFACE_FLAG_TRANSFORM.
	(glitz_surface_set_filter): IGNORE_REPEAT flag replaced by
	IGNORE_WRAP flag. TEXTURE_COORDS flag replaced by EYE_COORDS flag.

	* src/glitz_program.c: Program type should not be part of
	convolution program headers or gradient program headers.
	(_glitz_compile_arb_fragment_program): Improved failure checking.
	(_glitz_create_fragment_program): Program type is now added here.
	(_glitz_create_fragment_program): Pass number of parameters that
	will be required to _glitz_compile_arb_fragment_program.

	* src/glitz_pixel.c (glitz_set_pixels): 0 as flags to
	glitz_texture_set_tex_gen is what we want here.

	* src/glitz_glx_info.c: Added glGetError to gl_proc_address.

	* src/glitz_glx_extension.c: GL_ARB_texture_non_power_of_two has
	been promoted as a core feature to OpenGL 2.0.
	GL_ENV_texture_combine_env is not really a OpenGL 1.3 feature,
	GL_ARB_texture_combine_env is.

	* src/glitz_gl.h: Added glGetError prototype and error tokens.
	Added GLITZ_GL_MAX_PROGRAM_LOCAL_PARAMETERS token.
	Fixed glGetProgramiv prototype.

	* src/glitz_filter.c (glitz_filter_set_params): Fixed gradient
	filter coordinate generation.
	(glitz_filter_set_type): Don't use SURFACE_PAD macro to check for
	padded gradient here.

	* src/glitz_compose.c (SURFACE_WRAP): Added transformation
	support for hardware without GL_ARB_texture_clamp_to_border.

	* src/glitz_agl_surface.c: Fixed so that AGL backend actually
	compiles.

	* src/glitz_agl_info.c: Added glGetError to gl_proc_address.

	* src/glitz_agl_extension.c (glitz_agl_query_extensions): Fixed so
	that AGL backend actually compiles.

	* src/glitz.c (glitz_composite): replaced TEXTURE_COORDS flag with
	EYE_COORDS flag, which is obviously the other way around.
	(glitz_copy_area): 0 as flags to glitz_texture_set_tex_gen is
	what we want here.

2004-09-08  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_format.c (glitz_format_for_each_texture_format): Use
	default GLITZ_GL_PROXY_TEXTURE_2D texture.

2004-09-07  David Reveman  <c99drn@cs.umu.se>

	* src/glitzint.h: Allow use of a version number to check presence of
	an extension.
	
	* src/glitz_util.c (glitz_extensions_query): Allow use of a version
	number to check presence of an extension.

	* src/glitz_glx_info.c (glitz_glx_screen_info_get): Don't query
	formats if OpenGL version is insufficient.

	* src/glitz_glx_extension.c: Improved extension checking.

	* src/glitz_glx_context.c (glitz_glx_context_proc_address_lookup): 
	Lookup correct symbols.

	* src/glitz_agl_info.c (glitz_agl_thread_info_init): Don't query
	formats if OpenGL version is insufficient.

	* src/glitz_agl_extension.c: Improved extension checking.

	* src/glitz.h (GLITZ_REVISION): Bump version to 0.2.1.

	* configure.in: Bump version to 0.2.1.

	* src/glitz-agl.h: Be consistent with the GLX backend.

	* src/glitz_agl_surface.c: Be consistent with the GLX backend.

	* src/glitz-glx.h: Window size as parameters to
	glitz_glx_surface_create_for_window to avoid unnecessary server
	round trip.

	* src/glitz_glx_surface.c: Window size as parameters to
	glitz_glx_surface_create_for_window to avoid unnecessary server
	round trip.

	* src/glitzint.h: Added texture flags.
	Removed texture_mask.
	GLITZ_FLAG -> GLITZ_SURFACE_FLAGS.
	texcoord_height and texcoord_width replaced by texture.box.

	* src/glitz_texture.c: Make sure fill transparent works even though
	GL_ARB_texture_border_clamp is missing.
	texture_mask goes away.
	Added texture flags.
	texcoord_height and texcoord_width replaced by texture.box.

	* src/glitz_surface.c: GLITZ_FLAG -> GLITZ_SURFACE_FLAGS.
	texture_mask goes away.
	Added texture flags.
	texcoord_height and texcoord_width replaced by texture.box.
	Added GLITZ_SURFACE_FLAG_SIMPLE_TRANSFORM_MASK, which mean no
	transform or translate only transform.

	* src/glitz_rect.c (glitz_set_rectangles): 
	GLITZ_FLAG -> GLITZ_SURFACE_FLAGS.

	* src/glitz_pixel.c (glitz_set_pixels): texture->box
	specifies the texture origin in the texture map.
	(glitz_set_pixels): no need to pass surface height
	to glitz_texture_set_tex_gen anymore.
	(glitz_set_pixels): GLITZ_FLAG -> GLITZ_SURFACE_FLAGS.

	* src/glitz_glxint.h: texture_mask goes away.

	* src/glitz_glx_surface.c: Added texture flags.
	GLITZ_FLAG -> GLITZ_SURFACE_FLAGS.

	* src/glitz_glx_info.c: texture_mask goes away. 

	* src/glitz_glx_extension.c (glitz_glx_query_extensions): 
	texture_mask goes away.

	* src/glitz_geometry.c (glitz_set_geometry): GLITZ_FLAG ->
	GLITZ_SURFACE_FLAGS.

	* src/glitz_filter.c (glitz_filter_set_params): Don't calculate
	texture unit sizes here, they have already been calculated in
	the texture object.
	texcoord_height and texcoord_width replaced by texture.box.

	* src/glitz_compose.c: Added texture flags.
	Fill type transparent supported even though
	GL_ARB_texture_border_clamp is missing.

	* src/glitz_aglint.h: texture_mask goes away.

	* src/glitz_agl_surface.c: Added texture flags.
	GLITZ_FLAG -> GLITZ_SURFACE_FLAGS.

	* src/glitz_agl_extension.c (glitz_agl_query_extensions): 
	texture_mask goes away.

	* src/glitz.c (glitz_composite): no need to pass surface height
	to glitz_texture_set_tex_gen anymore.

2004-09-04  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_buffer.c (glitz_buffer_unmap): Obviously wrong.

2004-09-03  David Reveman  <c99drn@cs.umu.se>

	* src/glitzint.h: Switched to geometry buffers.

	* src/glitz_texture.c: Added texcoord_width_unit and
	texcoord_height_unit.
	Always use glTexGen for texture coordinates.

	* src/glitz_surface.c: Cleaned up public API.
	Switched to geometry buffers.
	glitz_buffer_t -> glitz_color_buffer_t.

	* src/glitz_status.c: Removed unused status values. Added
	CONTENT_DESTROYED.

	* src/glitz_rect.c: fill -> set and set always use SRC operator.
	glitz_set_rectangles works for all surfaces, drawable or not.

	* src/glitz_program.c: Transformations are no longer done in
	fragment programs. Vertex programs are no longer needed.

	* src/glitz_pixel.c: Use fixed point pixel conversion.
	pixel_buffer -> buffer and moved to glitz_buffer.c.
	glitz_put_pixels -> glitz_set_pixels.

	* src/glitz_operator.c: Stencil operators no longer needed.

	* src/glitz_gl.h: VertexArray, TexGen tokens and prototypes.
	More buffer object prototypes.

	* src/glitz_filter.c: Use float instead of double everywhere.
	Do all calculations at "filter set" time and nothing at
	"filter use" time.
	Vertex programs are no longer needed.

	* src/glitz_compose.c: Use float instead of double everywhere.
	Vertex programs are no longer needed.

	* src/glitz_glx_surface.c: New context specific backend objects.
	Removed update_size backend function.

	* src/glitz_agl_surface.c: New context specific backend objects.
	Removed update_size backend function.

	* src/glitz_glx_context.c: New context specific backend objects.

	* src/glitz_agl_context.c: New context specific backend objects.

	* src/glitz.h: Added new geometry system. Cleaned up public API.

	* src/glitz.c: Switched using vertex arrays and vertex buffer
	objects for everything.

	* src/Makefile.am (libglitz_la_SOURCES): Removed glitz_trap.c,
	glitz_tri.c and glitz_stencil.c. Added glitz_buffer.c and
	glitz_geometry.c.

	* src/glitz.h (GLITZ_REVISION): Bump version to 0.2.0.

	* configure.in: Bump version to 0.2.0.

	* TODO: Switched to geometry buffers.
	Transformations are no longer done in fragment programs.

2004-08-18  David Reveman  <c99drn@cs.umu.se>

	* src/glitzint.h: New filter system should now be working.
	Added x_offset, y_offset to all polygon rendering functions.

	* src/glitz_util.c: Added glitz_clamp_value.

	* src/glitz_tri.c: Added x_offset, y_offset.
	Don't use display list for multi-sampling as it turned out slower than
	without display lists.
	Added new glitz_add_triangles function.

	* src/glitz_trap.c: Switch to new trapezoid type.
	Added x_offset, y_offset.
	Don't use display list for multi-sampling as it turned out slower than
	without display lists.
	Added new glitz_add_trapezoids function.

	* src/glitz_surface.c (glitz_surface_init): HINT_CLIP default.
	(glitz_surface_set_transform): Fixed projective transformations.
	Removed glitz_surface_get_affine_transform.
	(glitz_surface_set_fill): Added GLITZ_FILL_CLIP.
	Removed correctness hint.
	(glitz_surface_set_filter): Updated filter system.
	Removed polyopacity.
	Added x_offset, y_offset to clipping functions.

	* src/glitz_stencil.c: Added x_offset, y_offset.

	* src/glitz_rect.c: Added x_offset, y_offset.

	* src/glitz_program.c: Added new much improved fragment programs
	and new system for creating them.

	* src/glitz_pixel.c (glitz_put_pixels): Removed broken render texture
	support.

	* src/glitz_glx_surface.c: Don't use render texture.

	* src/glitz_glx_info.c: Removed display list functions.

	* src/glitz_glx_format.c (_glitz_glx_format_compare): We rather have
	single buffered non-multisample formats first.

	* src/glitz_glx_extension.c: Don't use render texture.

	* src/glitz_glx_context.c: Don't use render texture.
	Don't check max texture indirections here.

	* src/glitz_gl.h: Added some fragment program tokens.
	Removed display list function prototypes.

	* src/glitz_filter.c: Added new convolution and new gradient filters.

	* src/glitz_compose.c: Added fill type clip.
	(_glitz_get_surface_type): Tracking changes to new filter system.

	* src/glitz_aglint.h: Don't use render texture.

	* src/glitz_agl_surface.c: Don't use render texture.

	* src/glitz_agl_pbuffer.c: Don't use render texture. We need a better
	interface for that. GL_EXT_render_target looks promising.

	* src/glitz_agl_info.c: Removed display list functions.

	* src/glitz_agl_format.c (_glitz_agl_format_compare): We rather have
	non-multisample formats first.

	* src/glitz_agl_extension.c (glitz_agl_query_extensions): Don't check
	max texture indirections here.

	* src/glitz.h: Switch to the new trapezoid type.
	Added GLITZ_FILTER_GAUSSIAN.
	Added fill type CLIP, which works the same way as X Render; no image 
	transformation, then dst rectangle is clipped to surface size. image
	transformation, fill type transparent is used.
	Removed correctness hint as highest quality is now always used.
	Removed polyopacity as it's now a parameter to the composite polygon
	functions.
	Added x_offset and y_offset to all polygon rendering functions.
	Added glitz_add_trapezoids and glitz_add_triangles.

	* src/glitz.c: Removed the manual repeat fall-back as it was too many
	problems with it and it just made everything a mess.
	GL_ARB_texture_border_clamp is now required for normal transformations.
	Switch to not using display lists for multi-sampling as it seems to
	be faster.

	* src/Makefile.am (libglitz_la_SOURCES): Removed glitz_matrix.c.

	* TODO: Added new convolution and gradient filter.
	Fixed projective transformations.
	Added some notes about gamma correction.

2004-08-10  David Reveman  <c99drn@cs.umu.se>

	* src/glitz.h: Added glitz_surface_finish.

	* src/glitzint.h: Added allocate parameter to get_texture backend
	function.

	* src/glitz_surface.c: Removed glitz_surface_try_push_current.

	* src/glitz_format.c: Removed option from find_standard_format and
	made standard format names match exactly.

	Switch name of glitz_render data types, functions and source
	code to glitz_combine_, glitz_composite_ and glitz_compose.c.

2004-08-05  David Reveman  <c99drn@cs.umu.se>

	* src/glitzint.h: New composite interface.
	New filter system.
	Improved OpenGL state updating. 
	Removed programmatic surface.

	* src/glitz_util.c: Removed glitz_intersect_bounding_box_double.
	(glitz_uint_to_power_of_two): Faster.
	Removed glitz_uint_is_power_of_two in favor of the POWER_OF_TWO
	macro, thanks to Roman Pozlevich for the tip.

	* src/glitz_tri.c (glitz_int_composite_triangles): Smarter way for
	doing polygon opacity.

	* src/glitz_trap.c (glitz_composite_trapezoids): Smarter way for doing
	polygon opacity.

	* src/glitz_texture.c: Use POWER_OF_TWO macro.
	(_glitz_texture_allocate): Clear unused texels.
	New filter and wrap handling.
	Added glitz_texture_tex_coord.

	* src/glitz_surface.c (glitz_surface_init): Detect solid surface type.
	Removed glitz_surface_create_intermediate.
	Removed programmatic surfaces.
	Added _glitz_surface_solid_store and glitz_surface_ensure_solid
	functions for solid color handling.
	(glitz_surface_set_transform): New filter system.
	(glitz_surface_get_affine_transform): Added 
	glitz_surface_get_affine_transform so that affine transform is only
	computed when actually needed.
	Added glitz_surface_set_fill.
	Added glitz_surface_set_correctness_hint.
	(glitz_surface_set_filter): New filter system.
	(glitz_surface_update_state): Added glitz_surface_update_state for much
	more efficient OpenGL state updating.
	(glitz_surface_update_state): Multisample handling is now done here.

	* src/glitz_stencil.c: Write update mask.

	* src/glitz_status.c: Added glitz_status_to_status_mask.

	* src/glitz_render.c: Added support for component alpha with solid 
	surfaces.
	Filters moved into glitz_filter.c.
	Updated all of the render interface to match the new composite
	interface.

	* src/glitz_rect.c: Added STORE_16 macro.
	(glitz_int_fill_rectangles): Don't compute bounds here.
	Added _glitz_fill_solid for filling solid surfaces with SRC operator.

	* src/glitz_program.c: Updated fragment programs to use texture matrix
	for projective transformations.
	(_glitz_create_vertex_program): Filter type determines vertex program
	creation parameters.
	(_glitz_create_fragment_program): Filter type determines fragment
	program creation parameters.
	(glitz_program_map_fini): Update to reflect changes to program map.

	* src/glitz_pixel.c: Use new tex_coord functions.

	* src/glitz_matrix.c: Removed glitz_matrix_transform_bounding_box.

	* src/glitz_glxint.h: Removed ARB from feature names.
	Switched to static context stack allocation.

	* src/glitz_glx_surface.c (_glitz_glx_surface_push_current): Lazy
	allocation of pbuffers.
	(_glitz_glx_surface_create): Lazy allocation of pbuffers.

	* src/glitz_glx_info.c: Added glLoadMatrixd and glMultMatrixd.
	(glitz_glx_screen_info_get): Switched to static context stack
	allocation.

	* src/glitz_glx_extension.c: New extensions
	GL_ARB_texture_border_clamp, GL_EXT_texture_env_combine.

	* src/glitz_glx_context.c: Multisample control is moved into glitz
	core library.
	(glitz_glx_context_make_current): Write the update mask.
	(glitz_glx_context_push_current): Switched to static context stack
	allocation.
	(glitz_glx_context_pop_current): Switched to static context stack
	allocation.

	* src/glitz_gl.h: Added GLITZ_GL_FLOAT and GLITZ_GL_CLAMP_TO_BORDER
	tokens.
	Added glitz_gl_load_matrix_d_t and glitz_gl_mult_matrix_d_t prototypes.

	* src/glitz_filter.c: Added new filter interface, which matches the 
	X Render extensions filter interface.

	* src/glitz_aglint.h: Removed ARB from feature names.
	Switched to static context stack allocation.
	

	* src/glitz_agl_surface.c (_glitz_agl_surface_push_current): Lazy
	allocation of pbuffers.
	(_glitz_agl_set_features): Stupid code goes away.
	(_glitz_agl_surface_create): Lazy allocation of pbuffers.

	* src/glitz_agl_info.c: Added glLoadMatrixd and glMultMatrixd.
	(glitz_agl_thread_info_init): Switched to static context stack
	allocation.

	* src/glitz_agl_extension.c: New extensions
	GL_ARB_texture_border_clamp, GL_EXT_texture_env_combine.

	* src/glitz_agl_context.c: Multisample control is moved into glitz
	core library.
	(glitz_agl_context_make_current): Write the update mask.
	(glitz_agl_context_push_current): Switched to static context stack
	allocation.
	(glitz_agl_context_pop_current): Switched to static context stack
	allocation.

	* src/glitz.man: Added new manual page with a short description.

	* src/glitz.h: New filter types.
	Removed ARB from feature names.
	Color ranges and programmatic surfaces, get out of here!
	Added fill types.
	glitz_surface_set_repeat replaced by glitz_surface_set_fill.
	Added glitz_surface_set_correctness_hint, which makes it possible
	to turn off the software repeat fall-back that produces slightly
	incorrect results.
	Added filter parameters to glitz_surface_set_filter.

	* src/glitz.c: New internal composite interface. This new interface
	almost completely replaces the old way to do composite. Only some
	parts of the old interface are left as fall-back for cases where
	hardware is not capable of using this new much improved interface.
	New interface is simpler and much more correct then the old one.
	Different fill types and projective transformations are now supported.

	* src/Makefile.am (libglitz_la_SOURCES): glitz_programmatic.c,
	glitz_color_range.c goes away and in comes glitz_filter.c.

	* TODO: Updated TODO list.

2004-07-24  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_agl_info.c:
	(glitz_agl_fini): Use glitz_agl_thread_info_destroy for thread info
	destruction.
	glitz_agl_thread_info_destroy is now used for manual thread info
	destruction and _tsd_destroy is now destruction call-back function.

	* src/glitz_glx_info.c (glitz_glx_create_root_context): 
	Store root_colormap in screen_info.
	(glitz_glx_screen_destroy): Free root colormap.
	(glitz_glx_fini): Use glitz_glx_thread_info_destroy for thread info
	destruction.
	(glitz_glx_thread_info_get): Don't use strdup.
	glitz_glx_thread_info_destroy is now used for manual thread info
	destruction and _tsd_destroy is now destruction call-back function.

	* src/glitz_glxint.h: Added Colormap root_colormap to screen_info
	struct.

	* src/glitz_agl_surface.c (_glitz_agl_surface_destroy): More efficient
	surface destruction.

	* src/glitz_glx_surface.c (_glitz_glx_surface_destroy): More efficient
	surface destruction.

	* src/glitz_surface.c (glitz_surface_fini): More safe and
	efficient texture deallocation.

	* src/glitz_programmatic.c (_glitz_programmatic_surface_create): 
	Fixed serious memory leak in programmatic surfaces. This caused
	a texture name allocation at each composite operation with a
	programmatic surface.

2004-07-22  David Reveman  <c99drn@cs.umu.se>

	* TODO: Added some important stuff to the TODO list.

2004-07-20  David Reveman  <c99drn@cs.umu.se>

	* src/glitzint.h: Added glTexEnvfv, glColor4d and pixel buffer
	functions to glitz_gl_proc_address_list_t.
	Moved some stuff into glitz_color_range.c.
	Added new glitz_render_op_t infrastructure.
	Added component-alpha support.
	Fixed some macros.
	Added reference counting to glitz_surface_t.
	programs -> program_map.
	SHORT_MODULATE -> SHORT_MULT.

	* src/glitz_surface.c (glitz_surface_init): programs -> program_map.
	Added reference counting to surfaces.
	Added glitz_surface_set_component_alpha.

	* src/glitz_render.c: Added new glitz_render_op_t infrastructure.
	This is a major improvement to the old mess. This new infrastructure
	scales very well, is much easier to understand and is more efficient.

	* src/glitz_programmatic.c: GLITZ_PROGRAMMATIC_SURFACE_LINEAR_TYPE ->
	GLITZ_PROGRAMMATIC_SURFACE_TYPE_LINEAR and 
	GLITZ_PROGRAMMATIC_SURFACE_RADIAL_TYPE ->
	GLITZ_PROGRAMMATIC_SURFACE_TYPE_RADIAL.
	(_glitz_programmatic_surface_create): Use MAXSHORT for static surface
	size.
	Removed glitz_programmatic_surface_setup.
	Removed glitz_programmatic_surface_bind as that code should now be
	in glitz_render.c.

	* src/glitz_program.c: Cleaned up and moved some that should be in
	glitz_render.c. Added support for component-alpha.

	* src/glitz_pixel.c: Added new pixel buffer interface, which 
	allows for asynchronous pixel transfers and access to 
	high-performance memory. Modified pixel transfer functions
	to use the new pixel buffer interface.

	* src/glitz_glxint.h: Added
	GLITZ_GLX_FEATURE_ARB_TEXTURE_ENV_COMBINE_MASK,
	GLITZ_GLX_FEATURE_ARB_TEXTURE_ENV_DOT3_MASK,
	GLITZ_GLX_FEATURE_PIXEL_BUFFER_OBJECT_MASK;
	programs -> program_map.

	* src/glitz_glx_surface.c (_glitz_glx_set_features): Better check
	for multi-texturing and check pixel buffer object extension
	support.
	programs -> program_map.

	* src/glitz_glx_info.c: Added glTexEnvfv, glColor4d and pixel buffer
	functions to _glitz_glx_gl_proc_address.
	(glitz_glx_thread_info_get): Fixed thread specific data
	allocation.
	(glitz_glx_display_destroy): Fixed memory leak.
	(glitz_glx_screen_info_get): Use glitz_program_map_init to
	initialize program map.
	(glitz_glx_screen_destroy): Use glitz_program_map_fini to
	clean up program map.

	* src/glitz_glx_extension.c: Check for GL_ARB_texture_env_combine,
	GL_ARB_texture_env_dot3 and GL_EXT_pixel_buffer_object.

	* src/glitz_glx_context.c (glitz_glx_context_proc_address_lookup): 
	Lookup pixel buffer object function pointers.

	* src/glitz_gl.h: Added a bunch of new tokens and function
	declarations.

	* src/glitz_format.c: OpenGL GL_ALPHA formats are now used for
	alpha textures instead of GL_INTENSITY.

	* src/glitz_color_range.c: Moved some stuff from glitzint.h to this
	file and use the new pixel buffer interface for asynchronous
	color range data transfers.

	* src/glitz_aglint.h: Added
	GLITZ_AGL_FEATURE_ARB_TEXTURE_ENV_COMBINE_MASK,
	GLITZ_AGL_FEATURE_ARB_TEXTURE_ENV_DOT3_MASK,
	GLITZ_AGL_FEATURE_PIXEL_BUFFER_OBJECT_MASK.
	programs -> program_map.

	* src/glitz_agl_surface.c: programs -> program_map.

	* src/glitz_agl_info.c: Added glTexEnvfv, glColor4d and pixel buffer
	functions to _glitz_agl_gl_proc_address.
	(glitz_agl_thread_info_get): Fixed thread specific data
	allocation.
	(glitz_agl_thread_info_init): Use glitz_program_map_init to
	initialize program map.
	(glitz_agl_thread_info_fini): Use glitz_program_map_fini to
	clean up program map.
	(glitz_agl_thread_info_fini): Do not free thread specific data here.

	* src/glitz_agl_extension.c: Check for GL_ARB_texture_env_combine,
	GL_ARB_texture_env_dot3 and GL_EXT_pixel_buffer_object.

	* src/glitz.h: glitz_color_range_create now needs a surface
	reference.
	Added glitz_surface_set_component_alpha.
	Added skip_lines to glitz_pixel_format_t.
	Added new pixel buffer interface, which allows for asynchronous
	pixel transfers and access to high-performance memory.

	* src/glitz.h: Added GLITZ_FEATURE_ARB_TEXTURE_ENV_COMBINE_MASK,
	GLITZ_FEATURE_ARB_TEXTURE_ENV_DOT3_MASK,
	GLITZ_FEATURE_PIXEL_BUFFER_OBJECT_MASK,
	GLITZ_FEATURE_COMPONENT_ALPHA_MASK.

	* src/glitz.c: Moved in my new glitz.c code, much of it is similar
	to the old glitz.c code. However, this new code uses the new
	glitz_render_op_t infrastructure and supports component alpha.

	* configure.in: Added GCC warning flags.

	* TODO: Updated todo list.

	* README: Added a short description of glitz.

2004-06-21  David Reveman  <c99drn@cs.umu.se>

	* src/glitz.h (GLITZ_REVISION): Bump version to 0.1.5.

	* configure.in: Bump version to 0.1.5.

	* src/glitzint.h: Added new pixel interface and support for none
	24bit visuals.
	Added byte order and bit order defines.

	* src/glitz_util.c: Removed big_endian, and format functions.

	* src/glitz_texture.c (glitz_texture_init): LUMINANCE_ALPHA is no
	longer used for A8 textures.

	* src/glitz_surface.c (glitz_surface_init): Init polyedge_smooth_hint
	to GLITZ_POLYEDGE_SMOOTH_HINT_GOOD.
	(glitz_surface_init): Use glitz_surface_texture_format to get correct
	texture format.
	Added glitz_surface_texture_format.
	(glitz_surface_create_similar): Inherit filter and polygon hints.
	(glitz_surface_setup_environment): Don't set PACK/UNPACK alignment.
	Added 2x and 8x software multisample patterns.
	(glitz_surface_enable_anti_aliasing): Use new polyedge smooth hint
	to choose anti-aliasing method.
	Removed draw_pixels and read_pixels functions.

	* src/glitz_render.c (glitz_render_type): GL_INTENSITY is now used
	for alpha textures.
	(glitz_render_enable): Set fragment color to correctly support
	non ARGB textures.

	* src/glitz_programmatic.c (_glitz_programmatic_surface_create):
	transform -> matrix.
	(glitz_programmatic_surface_set_transform): transform -> matrix.
	(glitz_programmatic_surface_bind): transform -> matrix.

	* src/glitz_pixel.c: Added new pixel interface.

	* src/glitz_operator.c (glitz_set_stencil_operator): Fixed
	stencil operators SET and UNION.

	* src/glitz_glx_surface.c (_glitz_glx_surface_update_size): Use
	texture format.

	* src/glitz_glx_info.c: Updated GL proc address table.
	(glitz_glx_screen_info_get): Don't set PACK/UNPACK alignment.

	* src/glitz_glx_format.c: Use new texture format detection system.

	* src/glitz_glx_context.c
	(glitz_glx_context_set_surface_anti_aliasing): Support new
	polyedge smooth hint.

	* src/glitz_gl.h: Added a few new GL defines and function prototypes.

	* src/glitz_format.c: Added new texture format detection system and
	full support for non 24-bit formats.

	* src/glitz_color_range.c (glitz_color_range_bind): Compile time 
	byte-order check.

	* src/glitz_agl_surface.c (_glitz_agl_surface_update_size): Use
	texture format.

	* src/glitz_agl_pbuffer.c (glitz_agl_pbuffer_create):
	internal_format -> format.

	* src/glitz_agl_info.c: Updated GL proc address table.
	(glitz_agl_thread_info_init): Don't set PACK/UNPACK alignment.

	* src/glitz_agl_format.c: Use new texture format detection system.

	* src/glitz_agl_context.c 
	(glitz_agl_context_set_surface_anti_aliasing): Support new
	polyedge smooth hint.

	* src/glitz.h: Added new pixel interface.
	Added glitz_surface_set_polyedge_smooth_hint.

	* src/glitz.c (glitz_copy_area): Updated to use new pixel interface.

	* src/Makefile.am (libglitz_la_SOURCES): Added glitz_pixel.c.

	* configure.in: Added bigendian check.

2004-06-11  David Reveman  <c99drn@cs.umu.se>

	* src/glitz.h (GLITZ_REVISION): Bump version to 0.1.4.

	* configure.in: Bump version to 0.1.4.

	* src/glitzint.h: Added software multi-sampling, new render interface
	and new stencil interface.

	* src/glitz_util.c: Removed glitz_union_bounding_box_double as it's
	no longer used.

	* src/glitz_tri.c (glitz_int_fill_triangles): Added software
	multi-sample support.
	(glitz_int_composite_triangles): Use new stencil interface.

	* src/glitz_trap.c (glitz_int_fill_trapezoids): Added software
	multi-sample support.
	(glitz_composite_trapezoids): Use new stencil interface.

	* src/glitz_surface.c: Removed transform stack as it's no longer
	needed.
	(glitz_surface_create_intermediate): Added 
	GLITZ_INTERMEDIATE_RGBA_STENCIL.
	Removed enable/disable program functions in favor of new render
	interface.
	Removed glitz_surface_bounds as it's no longer used.
	(glitz_surface_set_transform): Fixed so that NULL as transform
	for programmatic surface is handled correctly.
	(glitz_surface_set_draw_buffer): Switch stencil mask.
	(glitz_surface_swap_buffers): Clear all stencil masks.
	Added glitz_surface_enable_anti_aliasing,
	glitz_surface_disable_anti_aliasing and software multi-sample
	support.
	Move all clipping code into the new stencil interface.
	(glitz_surface_get_hints): Add GLITZ_HINT_MULTISAMPLE_MASK if software
	multi-sampling is used.

	* src/glitz_program.c: Modulate linear and radial gradients
	with current color to support dynamic gradient opacity. Modulate
	convolution filter result with current color to support dynamic
	opacity. Major cleanup, moved much code into the new render
	interface.

	* src/glitz_operator.c: Added glitz_set_stencil_operator as part
	of the new stencil buffer interface.

	* src/glitz_matrix.c: Removed glitz_matrix_translate as it's no
	longer used.

	* src/glitz_gl.h: Added GLITZ_GL_LESS, GLITZ_GL_LEQUAL, 
	GLITZ_GL_COMPILE and display list function prototypes.

	* src/glitz_agl_info.c: Added display list functions.

	* src/glitz_glx_info.c: Added display list functions.

	* src/glitz.h: Added GLITZ_HINT_MULTISAMPLE_MASK hint.

	* src/glitz.c (_glitz_composite_direct): Use new render interface.
	(glitz_composite): Use new render interface. Software multi-sampling
	support. Major cleanup to compositing using intermediate surface.

	* src/Makefile.am (libglitz_la_SOURCES): Added glitz_render.c and
	glitz_stencil.c.

2004-06-02  David Reveman  <c99drn@cs.umu.se>

	* src/glitzint.h: glitz_intersect_bounding_box should not be declared
	internal.

2004-05-30  David Reveman  <c99drn@cs.umu.se>

	* src/glitz.c (glitz_copy_area): Use new glitz_texture_copy_surface
	function.

	* src/glitz_agl_surface.c (_glitz_agl_surface_get_texture): Use
	new glitz_texture_copy_surface function.

	* src/glitz_glx_surface.c (_glitz_glx_surface_get_texture): Use
	new glitz_texture_copy_surface function.

	* src/glitzint.h: New parameters to glitz_texture_copy_surface.

	* src/glitz_texture.c (glitz_texture_copy_surface): Made it more
	flexible, this was required to make glitz_copy_area work correctly.

	* src/glitz.c (glitz_copy_area): And another one.

2004-05-29  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_matrix.c (glitz_matrix_transform_bounding_box): Fixed 
	another typo.

2004-05-28  David Reveman  <c99drn@cs.umu.se>

	* src/glitz.c (_glitz_composite_direct): Fixed typo.

	* src/glitz_glx_info.c (glitz_glx_screen_info_get): screen_info to
	proc_address_lookup.
	(glitz_glx_proc_address_lookup): Check for glXGetProcAddressARB last as
	we don't want to use it for GLX 1.3 function pointer lookups.

	* src/glitz_glxint.h: screen_info to proc_address_lookup.

	* src/glitz_glx_context.c (glitz_glx_context_proc_address_lookup): 
	Only check the number of texture indirections if fragment program
	extension is supported.
	(glitz_glx_context_make_current): screen_info to proc_address_lookup.

2004-05-27  David Reveman  <c99drn@cs.umu.se>

	* src/glitz.c (glitz_copy_area): Coordinate calculation fix.

2004-05-26  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_rect.c (glitz_int_fill_rectangles): Don't use glClear
	if clipping is set.

2004-05-24  David Reveman  <c99drn@cs.umu.se>

	* src/glitzint.h: Added support for read-only surfaces.

	* src/glitz_tri.c (glitz_int_composite_triangles): Use 
	create_intermediate.

	* src/glitz_trap.c (glitz_composite_trapezoids): Use 
	create_intermediate.

	* src/glitz_surface.c: Added support for read-only surfaces.
	Added glitz_surface_find_similar_format and 
	glitz_surface_find_similar_standard_format.

	* src/glitz_programmatic.c: Added support for read-only surfaces.

	* src/glitz_glx_surface.c: Added support for read-only surfaces.

	* src/glitz_glx_format.c: Added read-only formats.

	* src/glitz_format.c: Added read-only formats.

	* src/glitz_agl_surface.c: Added support for read-only surfaces.

	* src/glitz_agl_format.c: Added read-only formats.

	* src/glitz.h: Added read-only formats.
	Added find_similar format functions, create_similar new takes a
	a format pointer instead of an format name.

	* src/glitz.c (glitz_composite): Use create_intermediate.

	* src/glitz-glx.h: option_mask is a more appropriate name than options.

	* src/glitz-agl.h: option_mask is a more appropriate name than options.

2004-05-20  David Reveman  <c99drn@cs.umu.se>

	* src/glitz.h (GLITZ_REVISION): Bump version to 0.1.3.

	* configure.in: Bump version to 0.1.3.

	* src/glitz_surface.c (glitz_surface_fini): Free inverse_transform
	if allocated.
	(glitz_surface_push_transform): Allocate inverse_transform.
	(glitz_surface_set_transform): Set inverse_transform.

	* src/glitzint.h: Added inverse_transform matrix.

	* src/glitz.c (_glitz_composite_direct): Better direct compositing
	support.
	(glitz_composite): Fixed source offset handling.

2004-05-17  David Reveman  <c99drn@cs.umu.se>

	* src/glitzint.h: flush -> flush and swap_buffers. Added new
	read/draw buffer interface. Minor updates to matrix functions. Added
	glitz_function_pointer_t type.

	* src/glitz_texture.c (glitz_texture_copy_surface): Added new 
	read/draw buffer interface.

	* src/glitz_surface.c (glitz_surface_init): Added new read/draw buffer
	interface.
	Added _gl_buffer, glitz_surface_set_read_buffer, 
	glitz_surface_set_draw_buffer and glitz_surface_swap_buffers.
	(glitz_surface_dirty): Only mark dirty if draw_buffer != read_buffer.
	(glitz_surface_setup_environment): Added new read/draw buffer
	interface.
	(glitz_surface_read_pixels): Check for memory errors. Added new
	read/draw buffer interface.
	(glitz_surface_draw_pixels): Check for memory errors.

	* src/glitz_programmatic.c: flush -> flush and swap_buffers.

	* src/glitz_matrix.c: Minor updates to matrix functions.

	* src/glitz_glxint.h: glitz_glx_get_proc_address returns
	a glitz_function_pointer_t instead of void *.

	* src/glitz_glxext.h: glitz_glx_get_proc_address_arb_t returns
	a glitz_function_pointer_t instead of void *.

	* src/glitz_glx_surface.c: flush -> flush and swap_buffers.
	(_glitz_glx_surface_update_size): Update texture size.

	* src/glitz_glx_info.c (glitz_glx_get_proc_address): Return
	glitz_function_pointer_t instead of void *.
	(glitz_glx_get_proc_address): Better error checking.

	* src/glitz_aglint.h: Added bound_buffer variable to keep track
	of currently pbuffer bound buffer.

	* src/glitz_agl_surface.c: flush -> flush and swap_buffers.
	Rebind pbuffer if needed.
	(_glitz_agl_surface_update_size): Update texture size.

	* src/glitz_agl_pbuffer.c (glitz_agl_pbuffer_bind): Support
	rebinding to different buffers.

	* src/glitz.h: New read/draw buffer interface.

	* src/glitz.c (_glitz_composite_direct): Minor updates to
	matrix functions.
	(glitz_mask_bounds): Fixed mask bounding box calculations.
	(glitz_composite): Minor updates to matrix functions.
	(glitz_copy_area): Added new read/draw buffer interface.

2004-05-13  David Reveman  <c99drn@cs.umu.se>

	* src/glitz.c (glitz_copy_area): Fixed obvious memory leak.
	(glitz_copy_area): Fixed default texture to drawable copy.

	* src/glitz_glx_surface.c (_glitz_glx_surface_make_current_read): 
	Temporarily disabled glXMakeContextCurrent until I get it working
	properly.

	* TODO: Added copy area operation.

	* src/glitz.h: Added copy area operation.

	* src/glitz_agl_surface.c: Added _glitz_agl_surface_make_current_read.

	* src/glitz_glx_surface.c: Added _glitz_glx_surface_make_current_read.

	* src/glitz_glx_info.c (glitz_glx_proc_address_lookup): Lookup 
	function glXMakeContextCurrent.

	* src/glitz_glxext.h: Added use of GLX 1.3 function 
	glXMakeContextCurrent.

	* src/glitz_glxint.h: Added use of GLX 1.3 function 
	glXMakeContextCurrent.

	* src/glitz_surface.c: Added glitz_surface_make_current_read.
	_glitz_surface_try_push_current -> glitz_surface_try_push_current.

	* src/glitzint.h: Added backend function make_current_read.
	Added x_src and y_src parameters to glitz_texture_copy_surface.
	glitz_programs_fini should not be declared with __internal_linkage
	macro as it's used by the backend libraries.
	Added glitz_surface_make_current_read, glitz_surface_try_push_current
	and glitz_set_raster_pos.

	* src/glitz.c: Added glitz_copy_area.

2004-05-11  David Reveman  <c99drn@cs.umu.se>

	* src/glitz.h (GLITZ_REVISION): Bump version to 0.1.2.

	* configure.in: Bump version to 0.1.2.

	* src/glitzint.h: Convolution filter optimizations.

	* src/glitz_program.c: Convolution filter optimizations.

2004-05-10  David Reveman  <c99drn@cs.umu.se>

	* TODO: Added polygon opacity support.

	* src/glitz_tri.c (glitz_int_composite_triangles): Added polygon
	opacity support.

	* src/glitz_trap.c (glitz_composite_trapezoids): Added polygon
	opacity support.

	* src/glitz_surface.c (glitz_surface_init): Initialize polyopacity
	to 1.0.
	Added glitz_surface_set_polyopacity.

	* src/glitzint.h: Added surface attribute polyopacity.
	Added glitz_surface_set_polyopacity.

	* src/glitz.h: Added glitz_surface_set_polyopacity.

	* src/glitz_agl_surface.c: region_box -> bounding_box,
	sub_pixel_region_box -> bounding_box_double.

	* src/glitz_glx_surface.c: region_box -> bounding_box,
	sub_pixel_region_box -> bounding_box_double.

	* src/glitz_tri.c: region_box -> bounding_box,
	sub_pixel_region_box -> bounding_box_double.

	* src/glitz_trap.c: region_box -> bounding_box,
	sub_pixel_region_box -> bounding_box_double.

	* src/glitz_rect.c: region_box -> bounding_box,
	sub_pixel_region_box -> bounding_box_double.

	* src/glitz_surface.c: region_box -> bounding_box,
	sub_pixel_region_box -> bounding_box_double.

	* src/glitz_matrix.c: region_box -> bounding_box,
	sub_pixel_region_box -> bounding_box_double.

	* src/glitz.c: region_box -> bounding_box,
	sub_pixel_region_box -> bounding_box_double.

	* src/glitz_util.c: region_box -> bounding_box,
	sub_pixel_region_box -> bounding_box_double.

	* src/glitzint.h: region_box -> bounding_box,
	sub_pixel_region_box -> bounding_box_double.

	* TODO: Fixed simultaneous transform and repeat.

	* src/glitz_tri.c (glitz_int_composite_triangles): Use ARGB32 format
	for mask surface.

	* src/glitz_trap.c (glitz_composite_trapezoids): Use ARGB32 format
	for mask surface.

	* src/glitz.c: Added glitz_repeat_direction_t type.
	(glitz_composite): Fixed simultaneous transform and repeat.

2004-05-09  David Reveman  <c99drn@cs.umu.se>

	* TODO: Added library cleanup functions.
	
	* src/glitzint.h: Fixed program identifier types. Added
	glitz_programs_fini.

	* src/glitz_program.c: Fixed program identifier types. Added 
	glitz_programs_fini.

	* src/glitz_glxint.h: GLX procedure addresses are now thread
	specific. Added glitz_glx_context_destroy.

	* src/glitz_glxext.h: GLX procedure addresses are now thread
	specific.

	* src/glitz_glx_surface.c: GLX procedure addresses are now thread
	specific.

	* src/glitz_glx_pbuffer.c: GLX procedure addresses are now thread
	specific.

	* src/glitz_glx_info.c: GLX procedure addresses are now thread
	specific. Added glitz_glx_thread_info_init,
	glitz_glx_thread_info_fini, glitz_glx_screen_destroy,
	glitz_glx_display_destroy, glitz_glx_init and glitz_glx_fini.

	* src/glitz_glx_format.c: GLX procedure addresses are now thread
	specific.

	* src/glitz_glx_extension.c (glitz_glx_query_extensions): GLX 
	procedure addresses are now thread specific.

	* src/glitz_glx_context.c: GLX procedure addresses are now thread
	specific. Added glitz_glx_context_destroy.
	(_glitz_glx_context_create_glx13): Free visual info structure.
	(glitz_glx_ensure_pbuffer_support): Free fbconfigs.

	* src/glitz_aglint.h: Added glitz_agl_context_destroy.

	* src/glitz_agl_info.c: Added glitz_agl_thread_info_fini,
	glitz_agl_init and glitz_agl_fini.

	* src/glitz_agl_context.c: Added glitz_agl_context_destroy.

	* src/glitz-agl.h: Added glitz_agl_init and glitz_agl_fini.

2004-05-06  David Reveman  <c99drn@cs.umu.se>

	* src/glitzint.h: Better texture handling.

	* src/glitz_texture.c: Better texture handling.

	* src/glitz_programmatic.c: Better texture handling.

	* src/glitz_surface.c: Better texture handling.

	* src/glitz_glxint.h: Better texture handling.

	* src/glitz_glx_surface.c: Better texture handling.

	* src/glitz_aglint.h: Better texture handling.

	* src/glitz_agl_surface.c: Fixed indentation.
	Better texture handling.

	* src/glitz_agl_pbuffer.c: Better texture handling.

	* src/glitz.c (_glitz_composite_direct): Fixed dirty region.
	Better texture handling.

2004-05-04  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_glx_format.c (_glitz_glx_format_compare): Higher
	priority to multisample formats.

	* src/glitz_agl_surface.c (_glitz_agl_set_features): The feature 
	mask should not represent the features of the current surface
	but the features of the graphics hardware.

	* src/glitz_glx_surface.c (_glitz_glx_set_features): The feature 
	mask should not represent the features of the current surface
	but the features of the graphics hardware.

2004-05-02  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_glx_format.c (glitz_glx_query_formats): Make sure
	pbuffers are really working before we allow full offscreen support.

	* src/glitz_glxint.h: Added glitz_glx_ensure_pbuffer_support.

	* src/glitz_glx_context.c: Added glitz_glx_ensure_pbuffer_support.

	* src/glitz_glx_extension.c (glitz_glx_query_extensions): Moved
	renderer declaration.

	* TODO: Added planned features and some ideas.

2004-05-01  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_agl_format.c (glitz_agl_query_formats): Cleaned up 
	creation of fake offscreen formats.

	* src/glitz_glx_info.c (glitz_glx_thread_info_get): Do
	proc address lookup.
	(glitz_glx_screen_info_get): Handle errors better.
	(glitz_glx_create_root_context): Better root context creation.

	* src/glitz_glx_format.c: Cleaned up creation of fake offscreen
	formats.

	* src/glitz_glx_extension.c (glitz_glx_query_extensions): Pbuffer
	multi-sampling supported on Quadro cards.

	* src/glitz_format.c: Fixed indentation.

2004-04-30  David Reveman  <c99drn@cs.umu.se>

	* configure.in: Bump version to 0.1.1.

	* src/glitz.h (GLITZ_REVISION): Bump version to 0.1.1.

	* src/glitzint.h: Updated linear and radial surfaces.

	* src/glitz_surface.c: Updated linear and radial surfaces.

	* src/glitz_programmatic.c: Updated linear and radial surfaces.

	* src/glitz_program.c: Updated linear and radial surfaces.

	* src/glitz_matrix.c: Fixed indentation.

	* src/glitz.h: Removed glitz_distance_fixed_t. Updated linear
	and radial surfaces.

	* src/glitz.c (_glitz_composite_direct): Fixed rare source/mask
	offset bug.

2004-04-28  David Reveman  <c99drn@cs.umu.se>

	* src/glitzint.h: Added internal_format to glitz_texture_t. Added
	SURFACE_SOLID macro. Removed glitz_format_find_sufficient_standard.

	* src/glitz_util.c (glitz_get_gl_format_from_bpp): 
	Use GLITZ_GL_LUMINANCE_ALPHA instead of GLITZ_GL_ALPHA for
	A8 surfaces.

	* src/glitz_texture.c: Added support for direct compositing with mask
	surface only using multi-texturing.

	* src/glitz_surface.c: Added _glitz_surface_try_push_current.
	Added support for direct compositing with mask surface only using
	multi-texturing.
	(glitz_surface_gl_begin): Removed unnecessary set of surface status.

	* src/glitz_program.c: Added support for direct compositing with
	mask surface only using multi-texturing.

	* src/glitz_gl.h: Added GLITZ_GL_MODULATE and GLITZ_GL_LUMINANCE_ALPHA.

	* src/glitz_format.c: Removed glitz_format_find_sufficient_standard.

	* src/glitz_glxint.h: Added GLITZ_AGL_FEATURE_ARB_MULTITEXTURE_MASK.
	
	* src/glitz_aglint.h: Added GLITZ_AGL_FEATURE_ARB_MULTITEXTURE_MASK.

	* src/glitz_glx_surface.c (_glitz_glx_surface_create_similar): 
	Always use glitz_format_find_standard for similar surface formats.
	(_glitz_glx_surface_push_current): Fixed invalid set of surface status.
	
	* src/glitz_agl_surface.c (_glitz_agl_surface_create_similar): 
	Always use glitz_format_find_standard for similar surface formats.
	(_glitz_agl_surface_push_current): Fixed invalid set of surface status.

	* src/glitz_agl_pbuffer.c (glitz_agl_pbuffer_create): Use internal
	format for pbuffer.

	* src/glitz_glx_extension.c: Detect GL_ARB_multitexture extension.
	
	* src/glitz_agl_extension.c: Detect GL_ARB_multitexture extension.

	* src/glitz.h (GLITZ_FEATURE_OFFSCREEN_MULTISAMPLE_MASK): Added
	GLITZ_FEATURE_ARB_MULTITEXTURE_MASK.

	* src/glitz.c (_glitz_composite_direct): Added support for
	direct compositing with mask surface only using multi-texturing.
	(glitz_composite): Solid mask surfaces are now supported by all
	hardware.

2004-04-25  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_programmatic.c (glitz_programmatic_surface_bind):
	* src/glitz_program.c: Removed unnecessary parameter from linear
	gradient program.

	* src/glitz_glx_surface.c (_glitz_glx_surface_push_current):
	* src/glitz_agl_surface.c (_glitz_agl_surface_push_current):
	Context procedure address lookup can no longer accidentally
	raise "not supported" flag during surface initialization.

2004-04-15  David Reveman  <c99drn@cs.umu.se>

	* src/Makefile.am (libglitz_agl_la_SOURCES): glitz_aglext.h not
	needed.
	(libglitz_la_SOURCES): Fixed end of line.

2004-04-10  David Reveman  <c99drn@cs.umu.se>

	* configure.in: Backend detection similar to cairo.

2004-04-06  David Reveman  <c99drn@cs.umu.se>

	* ChangeLog: Added name to ChangeLog entries.

	* src/glitz_rect.c (glitz_int_fill_rectangles): Use glClear
	for solid color and stencil fills.

	* src/glitz_surface.c (glitz_int_surface_clip_rectangles): Use
	internal stencil operators with glitz_int_fill_rectangles.

	* src/glitzint.h: Added STENCIL_RECT operators.

	* autogen.sh (AUTOMAKE_FLAGS): Removed --foreign flag.

2004-04-03  David Reveman  <c99drn@cs.umu.se>

	* src/glitz_agl_surface.c (_glitz_agl_set_features):
	* src/glitz_glx_surface.c (_glitz_glx_set_features): Fixed 
	detection of convolution filter support.

	* src/glitz_glx_pbuffer.c:
	* src/glitz_glx_context.c:
	* src/glitz_glx_surface.c:
	* src/glitz_glxint.h:
	* src/glitzint.h:
	* src/glitz_glxext.h: Removed ATI_render_texture support.

2004-04-01  David Reveman  <c99drn@cs.umu.se>

	* src/glitzint.h: Removed __internal_linkage from functions that
	should be exported to backend libraries.

2004-03-31  David Reveman  <c99drn@cs.umu.se>

	* configure.in: Fixed misplacement of AM_CONDITIONAL macros.

2004-03-30  David Reveman  <c99drn@cs.umu.se>

	Name change (libglc -> libglitz)

2004-03-27  David Reveman  <c99drn@cs.umu.se>

	Added clipping support.
	Added new polygon drawing code.

2004-03-20  David Reveman  <c99drn@cs.umu.se>

	Added color range interface.
	New fragment program for radial gradient.

2004-03-15  David Reveman  <c99drn@cs.umu.se>

	* src/glc_programmatic.c: Divide by zero fix.

2004-03-14  David Reveman  <c99drn@cs.umu.se>

	* src/Makefile.am: Don't install GL extension headers. 

	Fixed polygon bounds.

2004-03-13  David Reveman  <c99drn@cs.umu.se>

	* src/glc_glx_format.c: Use GLX13 to find visual info if GLX13 is 
	present.

2004-03-12  David Reveman  <c99drn@cs.umu.se>

	* src/glc_trap.c: Removed ugly trapezoid hack.

2004-03-08  David Reveman  <c99drn@cs.umu.se>

	Fragment program updates. Added support for combined 
	convolution and solid programmatic surface operation.

2004-03-06  David Reveman  <c99drn@cs.umu.se>

	Included our own GL extension definitions.

2004-03-05  David Reveman  <c99drn@cs.umu.se>

	Added solid programmatic surfaces.

2004-02-28  David Reveman  <c99drn@cs.umu.se>

	* src/glc_agl_extension.c: Added NPOT texture support.

	* src/glc_glx_extension.c: Added NPOT texture support.

	* src/glcint.h: Added NPOT texture support.

	* src/glc_texture.c: Added NPOT texture support.

2004-02-27  David Reveman  <c99drn@cs.umu.se>

	* src/glc.c (_glc_composite_direct): Texture coordinate fix.

	* src/glc_tri.c: Important fix for source offset bug.

	* src/glc_trap.c (glc_composite_trapezoids): Important fix for
	source offset bug.

	* src/glc.c (glc_composite): Reduced programmatic surface size.

	* src/glc_program.c: Corrected some values in the expand map.

2004-02-26  David Reveman  <c99drn@cs.umu.se>

	Added programmatic surface support. Two types on programmatic
	surfaces are currently supported, linear and radial gradients.
	I also like to have a function based gradient and linear and
	radial guassian shadings.

2004-02-23  David Reveman  <c99drn@cs.umu.se>

	* src/glc_glx_format.c (glc_glx_query_formats_glx13): 
	Use GLC_GLX_FEATURE_GLX13_MASK.

	* src/glc_glx_context.c (glc_glx_context_get): Check
	GLC_GLX_FEATURE_GLX13_MASK instead of 
	GLC_FEATURE_OFFSCREEN_DRAWING_MASK.

	* src/glc_glx_extension.c (glc_glx_query_extensions): 
	Added GLC_GLX_FEATURE_GLX13_MASK.

	* src/glcint.h: Added GLC_GLX_FEATURE_GLX13_MASK.

2004-02-21  David Reveman  <c99drn@cs.umu.se>

	* src/glc_matrix.c: Added glc_matrix_transform_region function.

	* src/glcint.h: Added push/pop functionality for transform
	matrix. Added glc_matrix_transform_region function.

	* src/glc_surface.c: Added push/pop functionality for transform
	matrix.

	* src/glc.c: Only one intermediate surface is now needed when
	doing none direct compositing with mask and the area of that
	intermediate surface is now also minimized.

2004-02-20  David Reveman  <c99drn@cs.umu.se>

	Added convolution filter support.

2004-02-18  David Reveman  <c99drn@cs.umu.se>

	Fixed dynamic lookup handling and texture rectangle support.

2004-02-16  David Reveman  <c99drn@cs.umu.se>

	* configure.in: Check version of GL headers.

	Dynamic lookup of all GL and GLX extension symbols.

2004-02-12  David Reveman  <c99drn@cs.umu.se>

	Added pixel read/draw format info.

2004-02-11  David Reveman  <c99drn@cs.umu.se>

	* src/glc.c: Sub-pixel positioning fixes.

	* src/glc_glx_surface.c: Tracking changes of format pointer location.

	Merged fragment program code. 

2004-02-06  David Reveman  <c99drn@cs.umu.se>

	* src/glc_glx_extension.c (glc_glx_query_extensions): Add offscreen
	multisample support for geforce fx cards.

	* src/glc_tri.c (glc_color_triangles): Removed component masking.

	* src/glc_trap.c (glc_color_trapezoids): Removed component masking.

	* src/glc_rect.c: Removed component masking.

	* src/glc.c (glc_composite): Removed component masking.

	* src/glc_glx_format.c: Add a few more fake
	offscreen formats.

	* src/glc_agl_format.c (glc_agl_query_formats): Add a few more fake
	offscreen formats.

	* src/glc_surface.c (glc_surface_create_similar): Force all channels
	on for intermediates.

	* src/glc_format.c (glc_format_find_standard): All componenets must
	match exactly when searching for standard formats.

	* src/glc_glx_format.c (glc_glx_query_formats_glx12): 
	Fixed so that the correct visual IDs are retrieved.

2004-02-05  David Reveman  <c99drn@cs.umu.se>

	Merged new format handling code.

2004-02-03  David Reveman  <c99drn@cs.umu.se>

	* src/glc_glx_format.c (glc_glx_find_visual_format): Don't add options
	when searching for specific visual.
	(glc_glx_find_standard_format): Remove doublebuffer flag from standard
	formats.

	* src/glc_agl_surface.c (_glc_agl_surface_swap_buffers): When surface
	is single buffered, call glFlush instead of swapping buffers.

	* src/glc_glx_surface.c (_glc_glx_surface_swap_buffers): When surface
	is single buffered, call glFlush instead of swapping buffers.

	* src/glc_agl_format.c (_glc_add_options): Force single buffering
	when double buffering is not specified.

	* src/glc_glx_format.c (_glc_add_options): Force single buffering
	when double buffering is not specified.

	Restructuring of internal rendering model. 
	AGL backend added.

2003-12-13  David Reveman  <c99drn@cs.umu.se>

	* configure.in: Added --disable-glx switch.

	* configure.in: External slim package is no longer required.

	* src/glc.h: Directly fold in slim stuff rather than
	depending on it from an external package.

	* src/glcint.h: Directly fold in slim stuff rather than
	depending on it from an external package.

2003-12-09  David Reveman  <c99drn@cs.umu.se>

	* src/glc_tri.c: Always turn off polygon smooth after rendering.

	* src/glc_trap.c: Always turn off polygon smooth after rendering.

	* src/glc_util.c: Added extension check functions.

	* src/glcint.h: Moved out extension check functions from glx backend.

	* src/glc_glx_extension.c: Check for client glx extensions and 
	validate fbconfig and pbuffer support.

	* src/glc_surface.c (glc_surface_draw_pixels): Do not draw to both
	back and front buffer.

2003-12-09  Peter Nilsson  <c99pnn@cs.umu.se>

	* src/glc.h: Moved read/draw pixels from glx backend to glc 
	core.  
	
	* src/glc_glx_surface.c: Moved read/draw pixels from glx backend to glc 
	core.  

	* src/glc_surface.c: Moved read/draw pixels from glx backend to glc 
	core. 
	
2003-12-08  David Reveman  <c99drn@cs.umu.se>

	Texture format fixes. Linux and MacOSX ATI drivers should now work.

2003-12-07  David Reveman  <c99drn@cs.umu.se>

	New system for handling texture coordinates.

	* src/glc_glx_surface.c (_glc_glx_surface_destroy): Make sure drawable
	is not current when destroying it.

	* src/glc_glx_context.c (glc_glx_context_release): Make sure context
	is not current when destroying it.

2003-12-05  David Reveman  <c99drn@cs.umu.se>

	* configure.in: Keeping up with cairo.

	* src/glcint.h: Added glc_intersect_region function.

	* src/glc_util.c: Added glc_intersect_region function. 

	* src/glc.c (glc_composite): Added support for combined repeat and 
	transformations.

	* Added conditional backend building.

2003-12-04  David Reveman  <c99drn@cs.umu.se>

	* src/glc.c (glc_composite): Use GLC_OPERATOR_IN instead of
	GLC_OPERATOR_MASK.

	* src/glc_operator.c: Removed GLC_OPERATOR_MASK.

	* src/glcint.h: Removed GLC_OPERATOR_MASK. 

	* src/glc_texture.c (glc_texture_create): Use GL_RGBA as internal 
	texture format instead of GL_RGBA8.

	* src/glc_glx_surface.c (glc_glx_surface_draw_pixels): Added glFlush
	after glTexSubImage2D.

	* src/glc_tri.c (glc_color_triangles): Added glFlush after 
	glCopyTexSubImage2D.

	* src/glc_trap.c (glc_color_trapezoids): Added glFlush after 
	glCopyTexSubImage2D.

	* src/glc_rect.c: Added glFlush after glCopyTexSubImage2D.

	* src/glc.c (glc_composite): Repeat for none power of two textures
	implemented.
	(glc_composite): Added glFlush after glCopyTexSubImage2D.

2003-12-04  David Reveman  <c99drn@cs.umu.se>

	* src/glc_surface.c (glc_surface_setup_environment): Set pack/unpack
	alignment.

	* src/glc_glx_info.c (glc_glx_screen_info_get): Set pack/unpack
	alignment.

	* src/glc_glx_surface.c (glc_glx_surface_swap_buffers): Added
	glFlush before glXSwapBuffers.

2003-12-03  David Reveman  <c99drn@cs.umu.se>

	* src/glc_texture.c: Internal texture format fixed.

	* src/glc_util.c: New transformation model.

	* src/glcint.h: New transformation model.

	* src/glc.c (glc_composite): New transformation model.
	(glc_composite): Set color mask.
	(glc_composite): glCopyTexSubImage Y offset fix.
	(glc_composite): Render to offscreen fix.

	* src/glc_surface.c (glc_surface_setup_environment): Set polygon mode.
	(glc_surface_set_transform): New transformation model.
	
	* src/glc_tri.c (glc_color_triangles): glCopyTexSubImage Y offset fix.

	* src/glc_trap.c (glc_color_trapezoids): glCopyTexSubImage Y offset
	fix.

	* src/glc_glx_surface.c (glc_glx_surface_draw_pixels): Texture Y 
	offset fix.

2003-12-01  David Reveman  <c99drn@cs.umu.se>

	* src/glc.c (glc_composite): Only pop matrix if transformations has
	been used.

	* src/glc_tri.c (glc_color_triangles): Removed unwanted 
	transformations.

	* src/glc_trap.c (glc_color_trapezoids): Removed unwanted 
	transformations.

	* src/glc_rect.c: Removed unwanted transformations.

	* src/glc.c (glc_composite): Removed unwanted transformations.

	* src/glc_surface.c: Added disable/enable transform functions.

	* src/glcint.h: Added disable/enable transform functions.

2003-11-27  David Reveman  <c99drn@cs.umu.se>

	* src/glc_glx_info.c (glc_glx_thread_info_get): Type fix for not thread
	safe building.

	* src/glc_glx_context.c: Use XID instead of GLXFBConfigID.

	* src/glc_glxint.h: Use XID instead of GLXFBConfigID.

